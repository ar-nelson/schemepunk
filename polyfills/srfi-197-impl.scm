(define-syntax %chain
  (syntax-rules (<> <...>)
    ; (_ in-step out-step in-vars out-vars in-steps out-steps)
    ((_ () () () ((var) ...) () (step ... last-step))
      (let* ((var step) ...) last-step))
    ((_ () () () (vars ...) () (step ... last-step))
      (let*-values ((vars step) ...) last-step))
    ((_ () () () out-vars (next-step . in-steps) out-steps)
      (%chain next-step () () out-vars in-steps out-steps))
    ((_ () (step ...) () (out-vars ...) in-steps (out-steps ...))
      (%chain () () () (out-vars ... (chain-var)) in-steps (out-steps ... (step ... chain-var))))
    ((_ () step vars (out-vars ...) in-steps (out-steps ...))
      (%chain () () () (out-vars ... vars) in-steps (out-steps ... step)))
    ((_ (<...>) (step ...) () (out-vars ...) in-steps (out-steps ...))
      (%chain () () () (out-vars ... chain-rest-var) in-steps (out-steps ... (apply step ... chain-rest-var))))
    ((_ (<...>) (step ...) (vars ...) (out-vars ...) in-steps (out-steps ...))
      (%chain () () () (out-vars ... (vars ... . chain-rest-var)) in-steps (out-steps ... (apply step ... chain-rest-var))))
    ((_ (<...> . _) . _)
      (syntax-error "<...> can only be used as a final argument"))
    ((_ (<> . in-step) (out-step ...) (vars ...) . rest)
      (%chain in-step (out-step ... chain-var) (vars ... chain-var) . rest))
    ((_ (x . in-step) (out-step ...) . rest)
      (%chain in-step (out-step ... x) . rest))))

(define-syntax chain
  (syntax-rules ()
    ((_ initial-value) initial-value)
    ((_ initial-value (first-step ...) (step ...) ...)
      (%chain (first-step ...) () () () ((step ...) ...) (initial-value)))))

(define-syntax %chain-and
  (syntax-rules (<>)
    ; (_ in-step out-step in-vars out-vars in-steps out-steps)
    ((_ () () () (var ...) () (step ... last-step))
      (and-let* ((var step) ...) last-step))
    ((_ () () () out-vars (next-step . in-steps) out-steps)
      (%chain-and next-step () () out-vars in-steps out-steps))
    ((_ () (step ...) () (out-vars ...) in-steps (out-steps ...))
      (%chain-and () () () (out-vars ... chain-var) in-steps (out-steps ... (step ... chain-var))))
    ((_ () step (var) (out-vars ...) in-steps (out-steps ...))
      (%chain-and () () () (out-vars ... var) in-steps (out-steps ... step)))
    ((_ (<> . in-step) (out-step ...) () . rest)
      (%chain-and in-step (out-step ... chain-var) (chain-var) . rest))
    ((_ (<> . _) . _)
      (syntax-error "chain-and does not support multiple <> in a single step"))
    ((_ (x . in-step) (out-step ...) . rest)
      (%chain-and in-step (out-step ... x) . rest))))

(define-syntax chain-and
  (syntax-rules ()
    ((_ initial-value) initial-value)
    ((_ initial-value (first-step ...) (step ...) ...)
      (%chain-and (first-step ...) () () () ((step ...) ...) (initial-value)))))

(define-syntax %chain-when
  (syntax-rules (<>)
    ; (_ in-step out-step guard? chain-var in-steps out-expr)
    ((_ () () _ _ () out-expr) out-expr)
    ((_ () () _ _ ((next-guard? next-step) . in-steps) out-expr)
      (%chain-when next-step () next-guard? #f in-steps out-expr))
    ((_ () (step ...) guard? #f in-steps out-expr)
      (%chain-when () () #f #f in-steps
        (let ((chain-var out-expr))
          (if guard? (step ... chain-var) chain-var))))
    ((_ () step guard? chain-var in-steps out-expr)
      (%chain-when () () #f #f in-steps
        (let ((chain-var out-expr))
          (if guard? step chain-var))))
    ((_ (<> . in-step) (out-step ...) guard? #f . rest)
      (%chain-when in-step (out-step ... chain-var) guard? chain-var . rest))
    ((_ (<> . _) . _)
      (syntax-error "chain-when does not support multiple <> in a single step"))
    ((_ (x . in-step) (out-step ...) . rest)
      (%chain-when in-step (out-step ... x) . rest))))

(define-syntax chain-when
  (syntax-rules ()
    ((_ initial-value) initial-value)
    ((_ initial-value (first-guard? (first-step ...)) (guard? (step ...)) ...)
      (%chain-when (first-step ...) () first-guard? #f ((guard? (step ...)) ...) initial-value))))

(define-syntax %chain-lambda
  (syntax-rules (<> <...>)
    ; (_ in-step out-step args rest-of-steps)
    ((_ () (first-step ...) () steps)
      (lambda (chain-var) (chain (first-step ... chain-var) . steps)))
    ((_ () first-step args steps)
      (lambda args (chain first-step . steps)))
    ((_ (<...>) (step ...) () steps)
      (lambda chain-rest-var (chain (apply step ... chain-rest-var) . steps)))
    ((_ (<...>) (step ...) (args ...) steps)
      (lambda (args ... . chain-rest-var) (chain (apply step ... chain-rest-var) . steps)))
    ((_ (<...> . _) . _)
      (syntax-error "<...> can only be used as a final argument"))
    ((_ (<> . in-step) (out-step ...) (args ...) . rest)
      (%chain-lambda in-step (out-step ... chain-var) (args ... chain-var) . rest))
    ((_ (x . in-step) (out-step ...) . rest)
      (%chain-lambda in-step (out-step ... x) . rest))))

(define-syntax chain-lambda
  (syntax-rules ()
    ((_ (first-step ...) (step ...) ...)
      (%chain-lambda (first-step ...) () () ((step ...) ...)))))
